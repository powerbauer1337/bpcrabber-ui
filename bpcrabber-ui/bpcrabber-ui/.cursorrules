# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

[NOTE TO CURSOR: Since no API key is configured, please ignore both the Screenshot Verification and LLM sections below.]
[NOTE TO USER: If you have configured or plan to configure an API key in the future, simply delete these two notice lines to enable these features.]

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

## MCP Server Integration (2025-05-03)
- Integrated the following MCP servers into Cursor configuration:
  - **mcp-compass**: Model Context Protocol discovery and recommendation.
    - *Tools/Functions*: Discover available MCP servers and models, recommend best-fit tools for a task.
    - *Example*: List all available LLMs or automation tools before running a workflow.
  - **mcp-memory**: Knowledge graph memory for storing and recalling information.
    - *Tools/Functions*: Store facts, retrieve context, answer questions based on persistent memory.
    - *Example*: Save user preferences, project state, or task history for later retrieval.
  - **mcp-github**: GitHub code, issues, and repo integration.
    - *Tools/Functions*: Search code, fetch issues, automate repo management, analyze PRs.
    - *Example*: Automate code review, fetch open issues, or search for code snippets in a repo.
  - **mcp-sequentialthinking**: Stepwise/plan-based reasoning and task decomposition.
    - *Tools/Functions*: Decompose complex problems into actionable steps, generate and execute plans.
    - *Example*: Plan a multi-step deployment, generate a checklist for a coding task.
  - **mcp-puppeteer**: Web automation and browser control.
    - *Tools/Functions*: Automate browser actions, scrape web content, interact with web pages programmatically.
    - *Example*: Automatically log into a site, scrape data, or verify UI changes.
  - **godoc-mcp**: Go documentation and API exploration.
    - *Tools/Functions*: Search and retrieve Go package documentation, API signatures, and usage examples.
    - *Example*: Quickly look up Go API docs or function signatures without reading the full source code.
- All servers are now available for use in Cursor workflows. Restart Cursor after installation to activate.
- Example usage: Use sequential thinking for complex planning, memory for persistent knowledge, puppeteer for web automation, GitHub for codebase queries, and godoc-mcp for Go code understanding.

# Scratchpad

[Development started: 2024-06-11]

[2025-04-27] API server running, /download and /downloads endpoints accept and return requests (in-memory). Ready for BeatportDL integration.

[2025-04-28] Backend API server now simulates download queue and status changes ("queued" → "downloading" → "completed").

[2025-04-29] Downloader package now contains orchestration logic for real track downloads (setup, cover, tagging stubs). Next: implement downloadFile and integrate with API server.

[2025-04-30] API server now integrated with downloader package: POST /download triggers real downloads and updates status. Next: improve error reporting, support more types, or start frontend/browser extension integration.

# [2025-04-30] Browser Extension Development
[X] Scaffold extension/ directory and minimal Chrome extension files (Manifest V3, TS-ready)
[X] Add popup.html, popup.js, content.js, background.js, README.md
[X] Write setup instructions in README
[X] Implement content script injection for beatport.com
[X] Implement POST to backend from popup
[X] Inject checkboxes in lists with tracks, allow selection and batch download
[X] Test extension in Chrome
[X] Show download status in the popup
[X] Show download status inline on the Beatport page

# [2025-05-01] Backend Persistence
[X] Add JSON file-based persistence for downloads and config (downloads.json, config.json)
[X] Refactor handlers to load/save state on startup and after changes
[X] Handle file I/O errors gracefully

# [2025-05-02] Browser Extension MVP
[X] Inject UI into beatport.com for one-click sending
[X] Show download status in the popup
[X] Make backend URL configurable (options page)
[X] Batch download selection and status inline

# [2025-05-03] Web Dashboard MVP
[X] Scaffold Vite + React + TypeScript app in ui/
[X] Download queue/status table (live from /downloads)
[X] Config form (view/update /config)
[X] Manual URL input form (POST to /download)
[X] End-to-end test: extension → backend → dashboard

# Current State (2025-05-03)
- Backend: REST API, persistent, stable
- Extension: Feature-complete for MVP, configurable, works with backend
- Dashboard: Fully functional (queue, config, manual download)
- All code committed and pushed to GitHub

# Next Steps (future)
- [ ] Polish UI/UX (dashboard and extension)
- [ ] Add notifications, error logs, or advanced features
- [ ] (Optional) Serve dashboard static build from Go backend
- [ ] (Optional) Add authentication or user management

# Lessons
- Use Vite + React (TypeScript) for fast, modern dashboard integration
- Always check for submodules when saving progress in a monorepo
- Use Chrome storage for extension config to maximize flexibility
- Commit and push from project root for top-level changes; handle submodules separately

# BeatportDL UI/Browser Extension Integration Plan

## Big Picture Plan

1. Refactor BeatportDL core logic (if needed) to be callable from a Go server.
2. Develop a Go (Gin) REST API backend to expose download/config endpoints.
3. Build a browser extension (JS/TS) to select tracks/releases on beatport.com and send them to the backend.
4. Create a React web dashboard for configuration, manual downloads, and monitoring.
5. Integrate, test, and document the full workflow.

## Task Plan (Step-by-Step)

### Phase 1: Backend Preparation
- [X] Review BeatportDL's CLI logic and refactor as needed for API use (move download logic into reusable functions/packages).
- [X] Set up a new Go module for the API server (e.g., `cmd/server`).
- [X] Implement core REST endpoints:
  - [X] POST /download (accepts URLs, options, in-memory)
  - [X] GET /downloads (list/download status, in-memory)
  - [X] POST /config and GET /config
- [X] Add download queue management and status tracking (with simulated status changes).
- [X] Refactor download orchestration logic (handleUrl, etc.) into a reusable package for both CLI and API server.
- [X] Implement actual file download logic in downloader package.
- [X] Integrate downloader package with API server for real downloads.
- [ ] (Optional) Add persistent storage for download history/config.

### Phase 2: Browser Extension
- [ ] Scaffold a new extension (Manifest V3, JS/TS).
- [ ] Inject UI into beatport.com for selecting tracks/releases/playlists.
- [ ] Implement "Send to Downloader" button (POSTs to backend).
- [ ] Show confirmation/status in extension popup.

### Phase 3: Web Dashboard (React)
- [ ] Scaffold a new React app (e.g., in `ui/`).
- [ ] Build config/login form (credentials, quality, directory).
- [ ] Build manual URL input form.
- [ ] Build download queue/status table.
- [ ] Add error/log display.
- [ ] Connect to backend API for all actions.
- [ ] (Optional) Serve static build from Go backend.

### Phase 4: Integration & Testing
- [ ] Test end-to-end: extension → backend → downloader → dashboard.
- [ ] Handle errors, edge cases, and user feedback.
- [ ] Write setup and usage documentation.

### Phase 5: Polish & Release
- [ ] Add icons, branding, and polish UI.
- [ ] Prepare release builds for all platforms.
- [ ] Write a comprehensive README and usage guide.

# End of Plan

# [2025-06-11] BeatportDL Successful Login & Download
[X] Built BeatportDL for linux-amd64
[X] Verified User-Agent workaround is present in code (matches browser)
[X] Successfully logged in and started download (Strobe - Original Mix, FLAC)
[X] Committed progress locally
[ ] Pushed to GitHub fork (encountered remote mismatch, resolved by setting remote to powerbauer1337/bpcrabber-ui)
[ ] Need to pull/merge before push due to remote being ahead

# Lessons
- BeatportDL already implements a modern User-Agent; manual patching is not needed unless Beatport changes again.
- 403 errors can be caused by temporary server-side blocks, subscription issues, or API changes, not just credentials.
- When pushing to a fork, always ensure your local branch is up to date with the remote to avoid non-fast-forward errors.
- If push is rejected, run 'git pull origin main' and resolve any merge conflicts before pushing again.
